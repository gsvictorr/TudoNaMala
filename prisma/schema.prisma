// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lists        TravelList[] // Relacionamento com as listas criadas pelo usuário
  sharedAccess SharedAccess[] // Relacionamento com acessos compartilhados
}

model TravelList {
  id        Int      @id @default(autoincrement())
  name      String
  plan      ListPlan
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  items        ListItem[]
  sharedAccess SharedAccess[]
}

model SharedAccess {
  id         Int        @id @default(autoincrement())
  userId     Int
  listId     Int
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelList TravelList @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())

  @@unique([userId, listId]) // Garante que um usuário só pode ter um acesso por lista
}

model ListItem {
  id          Int          @id @default(autoincrement())
  name        String
  category    CategoryType
  isCompleted Boolean      @default(false)
  quantity    Int
  listId      Int
  travelList  TravelList   @relation(fields: [listId], references: [id], onDelete: Cascade)
}

enum ListPlan {
  FREE
  PREMIUM
}

enum CategoryType {
  CLOTHING
  ELECTRONICS
  DOCUMENTS
  TOILETRIES
  OTHER
}
